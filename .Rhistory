zmat = matrix(z,n,p)
zmatSq = zmat*zmat
chiSqvec = colSums(zmatSq)
hist(chiSqvec)
n2 = 20
p2 = 10000
z2 = rnorm(n2*p2)
zmat2 = matrix(z2,n2,p2)
zmat2Sq = zmat2*zmat2
chiSqvec2 = colSums(zmat2Sq)
hist(chiSqvec2)
fsim = var.test(chiSqvec,chiSqvec2)
fsim = (chiSqvec/n)/(chiSqvec2/n2)
fsim
hist(fsim)
fsim = (chiSqvec/n)/(chiSqvec2/n2)
hist(fsim)
fsimR = rf(10000,n1,n2)
hist(fsimR, add = T, col = 'Blue')
fsim = (chiSqvec/n)/(chiSqvec2/n2)
hist(fsim)
fsimR = rf(10000,n,n2)
hist(fsimR, add = T, col = 'Blue')
source('~/temp01.R')
source('~/Documents/temp01.R')
source('~/Documents/temp01.R',echo=TRUE)
getwd()
dir.create('temp01')
setwd("~/Documents/temp01")
lm
ls()
-3^(5/2)
c(m_1,m_2)
m_1 <- array(1:6, dim = c(2,3))
m_2 <- array(7:18. dim = c(4,3))
c(m_1,m_2)
m_2 <- array(7:18. dim = c(4,3))
m_1 <- array(1:6, dim = c(2,3))
m_2 <- array(7:18, dim = c(4,3))
c(m_1,m_2)
rbind(m_1,m_2)
install.packages('rmarkdown')
install.packages('knitr')
install.packages('data.table')
install.packages('dplyr')
'''{r load_data, cache =TRUE, warning = FALSE}
library(data.table)
raw.df <- fread("./data.csv", stringAsFactors = FALSE)
raw.df <- as.data.frame(raw.df)
{r load_data, cache =TRUE, warning = FALSE}
library(data.table)
raw.df <- fread("./data.csv", stringAsFactors = FALSE)
raw.df <- as.data.frame(raw.df)
employe = list(Name = 'John', Position = 'cashier', Salary = 9.5)
employee
employee
student = list(Name = 'peter', Classes = c('Bio101', 'Pysch200', 'calc1'))
student
student[2]
student[2][2]
student[[2]][2]
student$Name
employee$Name = NULL
employee = list(Name = 'John', Position = 'cashier', Salary = 9.5)
employee$Name = NULL
employee$Name
pet = list(Species = c('dog','cat','dog'), weight = c(20,10,40))
mean(pet$weight)
pet$weight = pet$weight+@
pet$weight = pet$weight+2
pet
v=1:4
sapply(v,sqrt)
e = 'R is great! I love data!'
substr(e, 1, 6)
grep('love', e)
e = 'R is great! I love data!'
substr(e, 1, 6)
grep('love', e)
e = 'R is great! I love data!'
substr(e, 1, 6)
grep('love', e)
gsub('great','wonderful',e)
e = 'R is great! I love data!'
substr(e, 1, 6)
strsplit(x=e, split = " ")
e = 'R is great! I love data!'
substr(e, 1, 6)
strsplit(x=e, split = " ")
grep('love', e)
strsplit(x=e, split = " ")
grep('love', e)
grep('love', x)
x = strsplit(e, split = " ")
grep('love', x)
x = strsplit(e, split = " ")
unlist(.last.value)
x = strsplit(e, split = " ")
unlist(.Last.value
x = strsplit(e, split = " ")
unlist(.Last.value)
x = strsplit(e, split = " ")
unlist(.Last.value)
grep('love', x)
x = strsplit(e, split = " ")
unlist(.Last.value)
grep('love', x)
grep(pattern = 'love', x = .Last.value)
x = strsplit(e, split = " ")
unlist(.Last.value)
grep(pattern = 'love', x = .Last.value)
ranks = c(4,1,1,4,3,3,2,3,2,4)
rank_factor = factor(ranks)
rank_factor+1
age_type = 'middle'
switch(age_type,
young = age[age <= 30],
middle = age[age <= 70 & age > 30],
old = age[age > 70]
)
Grade=c(75,93,88,80,99,75,76,92)
Choice = 'A'
switch(Choice,
A = Grade[Grade > 90],
B = Grade[Grade >= 90 & Grade <= 89],
C = Grade[Grade >= 70 & Grade <= 79])
income = 4600
taxrate = ifelse(income < 500,
0.1,
0.2)
taxrate
taxrate
income = 4600
taxrate = ifelse(income < 5000,
0.1,
0.2)
taxrate
income = 12300
taxrate = ifelse(income < 5000,
0.1,
0.2)
taxrate
system.time({
x2 = logical(1e4)
for (i in 1:1e4) {
y = prime.checker(i)
x2[i] = y
}
})
for(i in 1:100){
sum = + i^2
}
for(i in 1:100){
sum(square(i))
}
for(i in 1:100){
sum(i.square())
}
mysum = 0
v = c(2,3,4,5)
for (x in v){
for (y in 1:x){
mysum = mysum + y^2
}
}
print(mysum)
mysum = 0
v = c(2,3,4,5)
for (x in v){
for (y in 1:x){
mysum = mysum + y^2
}
print(mysum)
}
mysum = 0
v = c(2,3,4,5)
for (x in v){
for (y in 1:x){
mysum = mysum + y^2
}
print(mysum)
mysum = 0
}
shiny::runApp('R/MK1-SHINY/Coffee_Beans')
View(cofeee_merge)
View(coffee_merge)
library(shinydashboard)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(shiny)
library(DT)
library(shinyWidgets)
# library(RSQLite)
library(shinyLP)
coffee <- read.csv(file = "ICO_CROP_DATA.csv", stringsAsFactors = F)
coffee <- coffee %>% mutate(., SEASON = substr(YEAR,1,4))
coffee <- coffee %>% filter(., !is.na(TOTAL_PRODUCTION) & TOTAL_PRODUCTION != 0)
setwd("~/R/MK1-SHINY/Coffee_Beans")
runApp()
coffee <- read.csv(file = "ICO_CROP_DATA.csv", stringsAsFactors = F)
coffee <- coffee %>% mutate(., SEASON = substr(YEAR,1,4))
coffee <- coffee %>% filter(., !is.na(TOTAL_PRODUCTION) & TOTAL_PRODUCTION != 0)
coffee <- coffee[c(1,8,2,3,4,5,6,7)]
coffee <- coffee[c(-3)]
country_centroids = read.csv(file = "country_centroids_az8.csv", stringsAsFactors = F)
names(country_centroids)[1] <- "Country"
coffee$DOMESTIC_CONSUMPTION <- coffee$DOMESTIC_CONSUMPTION %>% replace_na(., 0)
coffee$EXPORTABLE_PRODUCTION <- coffee$EXPORTABLE_PRODUCTION %>% replace_na(., 0)
coffee$GROSS_OPENING_STOCKS <- coffee$GROSS_OPENING_STOCKS %>% replace_na(., 0)
coffee <- coffee %>% mutate(., "Percent_Domestic_Consumption" = DOMESTIC_CONSUMPTION/TOTAL_PRODUCTION * 100,
"Percent_Exportable_Production" = EXPORTABLE_PRODUCTION/TOTAL_PRODUCTION * 100,
"Percent_Gross Opening_Stocks"= GROSS_OPENING_STOCKS/TOTAL_PRODUCTION * 100)
mean_stats_year <- coffee %>% group_by(., SEASON) %>% summarise(., "Mean_Total_Production" = mean(TOTAL_PRODUCTION),
"Mean_Domestic_Consumption" = mean(DOMESTIC_CONSUMPTION),
"Mean_Exportable_Production" = mean(EXPORTABLE_PRODUCTION),
"Mean_Gross_Opening_Stocks" = mean(GROSS_OPENING_STOCKS))
coffee <- coffee %>% rename(., "Exportable_Production" = "EXPORTABLE_PRODUCTION")
coffee <- coffee %>% rename(., "Domestic_Consumption" = "DOMESTIC_CONSUMPTION")
coffee <- coffee %>% rename(., "Gross_Opening_Stocks" = "GROSS_OPENING_STOCKS")
coffee <- coffee %>% rename(., "Country" = "COUNTRY")
coffee <- coffee %>% rename(., "Season" = "SEASON")
coffee <- coffee %>% rename(., "Month" = "MONTH")
coffee_merge <- merge(coffee, country_centroids, by="Country")
cofeee_merge <- coffee_merge %>% rename(., "Total_Production" = "TOTAL_PRODUCTION")
coffee_merge$Season <- as.numeric(coffee_merge$Season)
View(cofeee_merge)
coffee_merge
# sorted_coffee <- coffee[order(coffee$Country, coffee$Season) , ]
# sorted_coffee = coffee_merge %>% group_by(., Season)
# sorted_coffee <- sorted_coffee[order(sorted_coffee$Season), ]
# sorted_coffee <- sorted_coffee %>% rename(., "Total_Production" = "TOTAL_PRODUCTION")
sorted_coffee <- coffee_merge %>% mutate(., Text = paste("Harvest Month:", '\t', Month, '\n',"Total Production:",'\t'  ,`Total_Production`,'\n',"Domestic Consumption:",
'\t',`Domestic_Consumption`,'\n', "Exportable Production:", "\t",
`Exportable_Production`,"\n","Gross Opening Stocks:","\t", `Gross_Opening_Stocks`))
View(coffee_merge)
cofeee_merge <- coffee_merge %>% rename(., "Total_Production" = "TOTAL_PRODUCTION")
coffee_merge$Season <- as.numeric(coffee_merge$Season)
# sorted_coffee <- coffee[order(coffee$Country, coffee$Season) , ]
# sorted_coffee = coffee_merge %>% group_by(., Season)
# sorted_coffee <- sorted_coffee[order(sorted_coffee$Season), ]
# sorted_coffee <- sorted_coffee %>% rename(., "Total_Production" = "TOTAL_PRODUCTION")
sorted_coffee <- coffee_merge %>% mutate(., Text = paste("Harvest Month:", '\t', Month, '\n',"Total Production:",'\t'  ,`Total_Production`,'\n',"Domestic Consumption:",
'\t',`Domestic_Consumption`,'\n', "Exportable Production:", "\t",
`Exportable_Production`,"\n","Gross Opening Stocks:","\t", `Gross_Opening_Stocks`))
View(coffee_merge)
View(coffee_merge)
library(shinydashboard)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(shiny)
library(DT)
library(shinyWidgets)
# library(RSQLite)
library(shinyLP)
coffee <- read.csv(file = "ICO_CROP_DATA.csv", stringsAsFactors = F)
coffee <- coffee %>% mutate(., SEASON = substr(YEAR,1,4))
coffee <- coffee %>% filter(., !is.na(TOTAL_PRODUCTION) & TOTAL_PRODUCTION != 0)
coffee <- coffee[c(1,8,2,3,4,5,6,7)]
coffee <- coffee[c(-3)]
country_centroids = read.csv(file = "country_centroids_az8.csv", stringsAsFactors = F)
names(country_centroids)[1] <- "Country"
coffee$DOMESTIC_CONSUMPTION <- coffee$DOMESTIC_CONSUMPTION %>% replace_na(., 0)
coffee$EXPORTABLE_PRODUCTION <- coffee$EXPORTABLE_PRODUCTION %>% replace_na(., 0)
coffee$GROSS_OPENING_STOCKS <- coffee$GROSS_OPENING_STOCKS %>% replace_na(., 0)
coffee <- coffee %>% mutate(., "Percent_Domestic_Consumption" = DOMESTIC_CONSUMPTION/TOTAL_PRODUCTION * 100,
"Percent_Exportable_Production" = EXPORTABLE_PRODUCTION/TOTAL_PRODUCTION * 100,
"Percent_Gross Opening_Stocks"= GROSS_OPENING_STOCKS/TOTAL_PRODUCTION * 100)
mean_stats_year <- coffee %>% group_by(., SEASON) %>% summarise(., "Mean_Total_Production" = mean(TOTAL_PRODUCTION),
"Mean_Domestic_Consumption" = mean(DOMESTIC_CONSUMPTION),
"Mean_Exportable_Production" = mean(EXPORTABLE_PRODUCTION),
"Mean_Gross_Opening_Stocks" = mean(GROSS_OPENING_STOCKS))
coffee <- coffee %>% rename(., "Exportable_Production" = "EXPORTABLE_PRODUCTION")
coffee <- coffee %>% rename(., "Domestic_Consumption" = "DOMESTIC_CONSUMPTION")
coffee <- coffee %>% rename(., "Gross_Opening_Stocks" = "GROSS_OPENING_STOCKS")
coffee <- coffee %>% rename(., "Country" = "COUNTRY")
coffee <- coffee %>% rename(., "Season" = "SEASON")
coffee <- coffee %>% rename(., "Month" = "MONTH")
coffee_merge <- merge(coffee, country_centroids, by="Country")
cofeee_merge <- coffee_merge %>% rename(., "Total_Production" = "TOTAL_PRODUCTION")
coffee_merge$Season <- as.numeric(coffee_merge$Season)
View(coffee_merge)
library(shinydashboard)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(shiny)
library(DT)
library(shinyWidgets)
# library(RSQLite)
library(shinyLP)
# conn = dbConnect(drv = RSQLite(), dbname = "./database.sqlite")
# dbListTables(conn)
coffee <- read.csv(file = "ICO_CROP_DATA.csv", stringsAsFactors = F)
coffee <- coffee %>% mutate(., SEASON = substr(YEAR,1,4))
coffee <- coffee %>% filter(., !is.na(TOTAL_PRODUCTION) & TOTAL_PRODUCTION != 0)
coffee <- coffee[c(1,8,2,3,4,5,6,7)]
coffee <- coffee[c(-3)]
country_centroids = read.csv(file = "country_centroids_az8.csv", stringsAsFactors = F)
names(country_centroids)[1] <- "Country"
coffee$DOMESTIC_CONSUMPTION <- coffee$DOMESTIC_CONSUMPTION %>% replace_na(., 0)
coffee$EXPORTABLE_PRODUCTION <- coffee$EXPORTABLE_PRODUCTION %>% replace_na(., 0)
coffee$GROSS_OPENING_STOCKS <- coffee$GROSS_OPENING_STOCKS %>% replace_na(., 0)
coffee <- coffee %>% mutate(., "Percent_Domestic_Consumption" = DOMESTIC_CONSUMPTION/TOTAL_PRODUCTION * 100,
"Percent_Exportable_Production" = EXPORTABLE_PRODUCTION/TOTAL_PRODUCTION * 100,
"Percent_Gross Opening_Stocks"= GROSS_OPENING_STOCKS/TOTAL_PRODUCTION * 100)
mean_stats_year <- coffee %>% group_by(., SEASON) %>% summarise(., "Mean_Total_Production" = mean(TOTAL_PRODUCTION),
"Mean_Domestic_Consumption" = mean(DOMESTIC_CONSUMPTION),
"Mean_Exportable_Production" = mean(EXPORTABLE_PRODUCTION),
"Mean_Gross_Opening_Stocks" = mean(GROSS_OPENING_STOCKS))
coffee <- coffee %>% rename(., "Exportable_Production" = "EXPORTABLE_PRODUCTION")
coffee <- coffee %>% rename(., "Domestic_Consumption" = "DOMESTIC_CONSUMPTION")
coffee <- coffee %>% rename(., "Gross_Opening_Stocks" = "GROSS_OPENING_STOCKS")
coffee <- coffee %>% rename(., "Country" = "COUNTRY")
coffee <- coffee %>% rename(., "Season" = "SEASON")
coffee <- coffee %>% rename(., "Month" = "MONTH")
coffee_merge <- merge(coffee, country_centroids, by="Country")
cofeee_merge <- coffee_merge %>% rename(., "Total_Production" = "TOTAL_PRODUCTION")
coffee_merge$Season <- as.numeric(coffee_merge$Season)
# sorted_coffee <- coffee[order(coffee$Country, coffee$Season) , ]
# sorted_coffee = coffee_merge %>% group_by(., Season)
# sorted_coffee <- sorted_coffee[order(sorted_coffee$Season), ]
# sorted_coffee <- sorted_coffee %>% rename(., "Total_Production" = "TOTAL_PRODUCTION")
sorted_coffee <- coffee_merge %>% mutate(., Text = paste("Harvest Month:", '\t', Month, '\n',"Total Production:",'\t'  ,`Total_Production`,'\n',"Domestic Consumption:",
'\t',`Domestic_Consumption`,'\n', "Exportable Production:", "\t",
`Exportable_Production`,"\n","Gross Opening Stocks:","\t", `Gross_Opening_Stocks`))
# sorted_coffee <- sorted_coffee %>% rename(., "Total Production" = "TOTAL_PRODUCTION")
mean_stats <- mean_stats_year[c(-1)]
stats = colnames(sorted_coffee)
stats = stats[c(-1,-2,-3,-11,-12,-13)]
library(shinydashboard)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(shiny)
library(DT)
library(shinyWidgets)
# library(RSQLite)
library(shinyLP)
#
coffee <- read.csv(file = "ICO_CROP_DATA.csv", stringsAsFactors = F)
coffee <- coffee %>% mutate(., SEASON = substr(YEAR,1,4))
coffee <- coffee %>% filter(., !is.na(TOTAL_PRODUCTION) & TOTAL_PRODUCTION != 0)
coffee <- coffee[c(1,8,2,3,4,5,6,7)]
coffee <- coffee[c(-3)]
country_centroids = read.csv(file = "country_centroids_az8.csv", stringsAsFactors = F)
names(country_centroids)[1] <- "Country"
coffee$DOMESTIC_CONSUMPTION <- coffee$DOMESTIC_CONSUMPTION %>% replace_na(., 0)
coffee$EXPORTABLE_PRODUCTION <- coffee$EXPORTABLE_PRODUCTION %>% replace_na(., 0)
coffee$GROSS_OPENING_STOCKS <- coffee$GROSS_OPENING_STOCKS %>% replace_na(., 0)
coffee <- coffee %>% mutate(., "Percent_Domestic_Consumption" = DOMESTIC_CONSUMPTION/TOTAL_PRODUCTION * 100,
"Percent_Exportable_Production" = EXPORTABLE_PRODUCTION/TOTAL_PRODUCTION * 100,
"Percent_Gross Opening_Stocks"= GROSS_OPENING_STOCKS/TOTAL_PRODUCTION * 100)
mean_stats_year <- coffee %>% group_by(., SEASON) %>% summarise(., "Mean_Total_Production" = mean(TOTAL_PRODUCTION),
"Mean_Domestic_Consumption" = mean(DOMESTIC_CONSUMPTION),
"Mean_Exportable_Production" = mean(EXPORTABLE_PRODUCTION),
"Mean_Gross_Opening_Stocks" = mean(GROSS_OPENING_STOCKS))
coffee <- coffee %>% rename(., "Exportable_Production" = "EXPORTABLE_PRODUCTION")
coffee <- coffee %>% rename(., "Domestic_Consumption" = "DOMESTIC_CONSUMPTION")
coffee <- coffee %>% rename(., "Gross_Opening_Stocks" = "GROSS_OPENING_STOCKS")
coffee <- coffee %>% rename(., "Country" = "COUNTRY")
coffee <- coffee %>% rename(., "Season" = "SEASON")
coffee <- coffee %>% rename(., "Month" = "MONTH")
coffee_merge <- merge(coffee, country_centroids, by="Country")
coffee_merge <- coffee_merge %>% rename(., "Total_Production" = "TOTAL_PRODUCTION")
coffee_merge$Season <- as.numeric(coffee_merge$Season)
# sorted_coffee <- coffee[order(coffee$Country, coffee$Season) , ]
# sorted_coffee = coffee_merge %>% group_by(., Season)
# sorted_coffee <- sorted_coffee[order(sorted_coffee$Season), ]
# sorted_coffee <- sorted_coffee %>% rename(., "Total_Production" = "TOTAL_PRODUCTION")
sorted_coffee <- coffee_merge %>% mutate(., Text = paste("Harvest Month:", '\t', Month, '\n',"Total Production:",'\t'  ,`Total_Production`,'\n',"Domestic Consumption:",
'\t',`Domestic_Consumption`,'\n', "Exportable Production:", "\t",
`Exportable_Production`,"\n","Gross Opening Stocks:","\t", `Gross_Opening_Stocks`))
View(sorted_coffee)
View(mean_stats_year)
runApp()
geo <- list(
showframe = TRUE,
showland = TRUE,
showcoastlines = TRUE,
projection = list(type = 'orthographic'),
resolution = '200',
showcountries = TRUE,
countrycolor = "#ededed",
showocean = TRUE,
oceancolor = '#0077be',
showlakes = TRUE,
lakecolor = '#0077be'
)
runApp()
runApp()
View(mean_stats)
runApp()
stats = colnames(sorted_coffee)
stats = stats[c(-1,-2,-3,-11,-12,-13)]
stats
runApp()
stats
runApp()
runApp()
sorted_coffee %>%
filter(Country == input$country) %>%
select(Season, input$stat_country)
sorted_coffee %>%
filter(Country == "Angola") %>%
select(Season, Total_Production) %>% ggplot(aes(x = Season, y = Total_Production))  + geom_line()
sorted_coffee %>%
filter(Country == 'Angola') %>%
select(Season, Total_Production) %>%
rename('variable' = Total_Production)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Season <- sorted_coffee$Season
Season
unique(sorted_coffee$Season)
arrange(desc(Season))
class(Season)
Season <- season %>% arrange(desc(Season))
Season <- Season %>% arrange(desc(Season))
Season
sorted_coffee %>% arrange(desc(Season))
sorted_coffee %>% arrange(desc(Season)) %>% select(Season)
Season <- sorted_coffee %>% arrange(Season) %>% select(Season)
Season <- unique(Season)
Season
runApp()
runApp()
runApp()
runApp()
mean_stats_year %>%
select(SEASON, input$mean)
runApp()
runApp()
my_var = 5
"my_var"
!!sym("my_var")
sym("my_var")
!sym("my_var")
eval(sym("my_var"))
runApp()
View(mean_stats_year)
mean_stats_year
mean_stats_year %>%
ggplot(aes(x = SEASON, y = Mean_Total_Production)) +
geom_line() +
geom_point())
mean_stats_year %>%
ggplot(aes(x = SEASON, y = Mean_Total_Production)) +
geom_line() +
geom_point()
mean_stats_year %>%
ggplot(aes(x = SEASON, y = Mean_Total_Production)) +
geom_line()
mean_stats_year %>%
ggplot(aes(x = SEASON, y = Mean_Total_Production)) +
geom_point()
mean_stats_year %>%
ggplot(aes(x = SEASON, y = Mean_Total_Production)) +
geom_point() +
geom_line()
sapply(mean_stats_year, class)
runApp()
mean_stats_year[, 'Mean_Total_Production']
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(sorted_coffee)
runApp()
runApp()
View(sorted_coffee)
runApp()
View(Year)
runApp()
